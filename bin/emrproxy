#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import ConfigParser
import argparse
import os
import subprocess

import boto3

home = os.path.expanduser("~")
key_root_path = home

parser = argparse.ArgumentParser()
parser.add_argument('-r', help='assign a region', dest='region')
parser.add_argument('-c', help='copy deploy key?(y or n)', dest='flag_cpkey')
parser.add_argument('-l', help='list all instances', dest='listins')

args = parser.parse_args()

config = ConfigParser.ConfigParser()
config.read('%s/.aws/config' % home)
region_name = config.get('default', 'region')
flag_cpkey = True
flag_listins = True
if not args.region is None:
    region_name = args.region
if args.flag_cpkey is None:
    flag_cpkey = False
if args.listins is None:
    flag_listins = False

# region_name = 'us-east-1'
print('\033[1;31;406m Region\033[0m: %s' % region_name)
client = boto3.client('emr', region_name=region_name)


def select_clusters():
    res = client.list_clusters()
    cluster_list = res['Clusters']
    ready_count = 0

    for i in range(len(cluster_list)):
        if 'TERMINATED' not in cluster_list[i]['Status']['State']:
            ready_count = ready_count + 1
            print('[%d]\t%s(%s): %s' % (
            i, cluster_list[i]['Name'], cluster_list[i]['Id'], cluster_list[i]['Status']['State']))
    if ready_count == 0:
        print("There is \033[1;31;406mNO\033[0m ready Clusters.")
        exit(0)
    mesg = '\033[1;31;406m Select a cluster: \033[0m \n'
    try:
        user_go = int(raw_input(mesg))
    except ValueError:
        print("Invalid input, exit section.")
        exit(0)
    keyName = get_cluster_key(cluster_list[user_go]['Id'])
    MasterPublicDnsName = get_master_public_dns(cluster_list[user_go]['Id'])

    list_application_web_url(cluster_list[user_go]['Id'],MasterPublicDnsName)
    # ssh proxy
    cmd = 'ssh -i %s/%s.pem -ND 8157 hadoop@%s' % (
        key_root_path, keyName, MasterPublicDnsName
    )

    print("cmd: %s" % (cmd))
    #print("\033[1;33;400mAWS Console URL:\033[0m %s" % (console_url))
    retcode = subprocess.call(cmd, shell=True)
    print(retcode)

def get_cluster_key(cluster_id):
    res = client.describe_cluster(ClusterId=cluster_id)['Cluster']['Ec2InstanceAttributes']['Ec2KeyName']
    return res.strip()

def get_master_public_dns(cluster_id):
    res = client.describe_cluster(ClusterId=cluster_id)['Cluster']['MasterPublicDnsName']
    return res.strip()


def list_application_web_url(cluster_id, master_dns):
    master_url = 'http://%s' % master_dns
    application_list = client.describe_cluster(ClusterId=cluster_id)['Cluster']['Applications']
    for i in range(len(application_list)):
        if 'Hadoop' in application_list[i]['Name']:
            print("\033[1;33;400mResource Manager:\033[0m %s:8088/" % (master_url))
            print("\033[1;33;400mHDFS Name Node:\033[0m %s:50070/" % (master_url))
        if 'Hbase' in application_list[i]['Name']:
            print("\033[1;33;400mHBase:\033[0m %s:16010/" % (master_url))
        if 'Spark' in application_list[i]['Name']:
            print("\033[1;33;400mSpark:\033[0m %s:18080/" % (master_url))

if __name__ == '__main__':
    select_clusters()
