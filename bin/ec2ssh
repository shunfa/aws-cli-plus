#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import argparse
import os
import subprocess
from builtins import input

import boto3
from configparser import ConfigParser

home = os.path.expanduser("~")
key_root_path = os.getenv('EC2_SSH_KEY_DIR', home)
print("Set SSH key directory from environmental varaible EC2_SSH_KEY_DIR or use home directory. Use %s" % key_root_path)

parser = argparse.ArgumentParser()
parser.add_argument('-r', help='assign a region', dest='region')

args = parser.parse_args()

config = ConfigParser()
config.read('%s/.aws/config' % home)
region_name = config.get('default', 'region')

if not args.region is None:
    region_name = args.region


# region_name = 'us-east-1'
print('\033[1;31;406m Region\033[0m: %s' % region_name)
client = boto3.client('ec2', region_name=region_name)

def list_instances():
    res = client.describe_instances()
    for count in range(len(res['Reservations'])):
        #res['Reservations'][3]['Instances'][0]['Tags']
        tagName = ''
        try:
            tags = res['Reservations'][count]['Instances'][0]['Tags']
            for v in range(len(tags)):
                if tags[v]['Key'] == 'Name':
                    tagName = '[' + tags[v]['Value'] + '] '
        except KeyError:
            tagName = ''

        if(res['Reservations'][count]['Instances'][0]['State']['Name'] == 'running'):
            InstanceId = res['Reservations'][count]['Instances'][0]['InstanceId']
            KeyName = res['Reservations'][count]['Instances'][0]['KeyName']
            InstanceType = res['Reservations'][count]['Instances'][0]['InstanceType']
            ndsname = ('PRIVATE-%s'%(InstanceId)) if res['Reservations'][count]['Instances'][0]['PublicDnsName'] == '' else \
                res['Reservations'][count]['Instances'][0]['PublicDnsName']
            print('[%d]\t%s%s(%s)' % (count, tagName, ndsname, InstanceType))
    mesg = '\033[1;31;406m Select a Instance: \033[0m \n'
    try:
        user_go = int(input(mesg))
    except ValueError:
        print("Invalid input, exit section.")
        exit(0)
    cmd = 'ssh -i %s/%s.pem ec2-user@%s' % (key_root_path, res['Reservations'][user_go]['Instances'][0]['KeyName'], res['Reservations'][user_go]['Instances'][0]['PublicDnsName'])
    print("cmd: %s" % (cmd))
    retcode = subprocess.call(cmd, shell=True)
    print(retcode)

if __name__ == '__main__':
    list_instances()
